* Emacs Settings

** Functions

*** Assign yes/no to y/n.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Turn auto generation of backup file off.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

*** Turn auto save off.
#+BEGIN_SRC emacs-lisp
  (setq auto-sace-default nil)
#+END_SRC

*** Turn off the annoying bell.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC


** Appearance

*** Hide startup message.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Hide tool bar.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** Hide menu bar.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

*** Hide scroll bar.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Split windows horizontally on startup.
#+BEGIN_SRC emacs-lisp
  (split-window-horizontally)
#+END_SRC

*** Maximize windows on startup.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

*** Turn off blinking of the cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC


** Keyboard-shortcuts

*** Removing KBD Bindings.

**** Used for moving between sentences.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-a") nil)
#+END_SRC

**** Used for 'other-window function.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x o") nil)
#+END_SRC

*** Move to the indentation's starting point.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-a") 'back-to-indentation)
#+END_SRC

*** Compile using user commands.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'compile)
#+END_SRC

*** Recompile using previous ocmmands.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-,") 'recompile)
#+END_SRC

*** Loads ansi-terminal in current frame.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C--") 'ansi-term)
#+END_SRC

*** Switch windows.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-;") 'other-window)
#+END_SRC


* Programming Settings

** Appearance

*** Convert text into symbol.
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

*** Autocomplete symbols.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

*** Show matching pair of parenthesis.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

*** Remove the delay to show matching pair of parenthesis.
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay nil)
#+END_SRC

*** Highlight the line where the cursor lies.

#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC

*** Change the default font.
#+BEGIN_SRC emacs-lisp
  (set-default-font "Space Mono 10" nil t)
#+END_SRC

*** Change cursor's color.
#+BEGIN_SRC emacs-lisp
  (set-cursor-color "#ffffff")
#+END_SRC


** Keyboard-shortcuts


* Ansi-Term

#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    :hook c++-mode-hook c-mode-hook emacs-lisp-mode-hook)
#+END_SRC
    
* Powerline-mode

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-default-theme))
#+END_SRC

* Elpy

#+BEGIN_SRC emacs-lisp
  ;(use-package elpy
  ;  :ensure t
  ;  :config
  ;  (enable-elpy)
  ;  (setq elpy-rpc-python-command "python3")
  ;  :interpreter
  ;  ("python3" . python-mode))
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (setq helm-split-window-in-side-p t)
    (helm-autoresize-mode t)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    :bind
    ("C-x b" . helm-buffers-list)
    ("C-=" . helm-bookmarks)
    ("M-x" . helm-M-x)
    ("M-y" . helm-show-kill-ring)
    ("C-s" . helm-occur)
    ("C-x C-f". helm-find-files))


#+END_SRC

* Xscope

#+BEGIN_SRC emacs-lisp
  (use-package xcscope
    :ensure t
    :bind (:map cscope-command-map
                ("C-<f5>" . cscope-find-this-symbol)
                ("C-<f1>" . cscope-display-buffer-toggle)
                ("C-<f2>" . cscope-display-buffer)))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init 
    (setq org-src-window-setup 'current-window))
#+END_SRC

* Rainbow

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+End_SRC

* Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

